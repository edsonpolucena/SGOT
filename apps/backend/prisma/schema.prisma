generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(cuid())
  email        String       @unique
  passwordHash String
  createdAt    DateTime     @default(now())
  name         String?
  updatedAt    DateTime     @updatedAt
  companyId    Int?
  role         UserRole     @default(CLIENT)
  status       UserStatus   @default(ACTIVE)
  obligations  Obligation[]
  company      Empresa?     @relation(fields: [companyId], references: [id])
}

model Obligation {
  id          String           @id @default(cuid())
  title       String
  dueDate     DateTime
  status      ObligationStatus @default(PENDING)
  notes       String?
  createdAt   DateTime         @default(now())
  amount      Decimal?         @db.Decimal(10, 2)
  periodEnd   DateTime
  periodStart DateTime
  regime      Regime
  updatedAt   DateTime         @updatedAt
  userId      String
  companyId   Int
  company     Empresa          @relation(fields: [companyId], references: [id])
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  files       ObligationFile[]

  @@index([userId])
  @@index([companyId])
  @@index([status])
  @@index([regime])
  @@index([dueDate])
}

model Empresa {
  id          Int          @id @default(autoincrement())
  codigo      String       @unique
  nome        String
  cnpj        String       @unique
  email       String?
  telefone    String?
  endereco    String?
  status      String       @default("ativa")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  obligations Obligation[]
  users       User[]
}

model ObligationFile {
  id           String     @id @default(cuid())
  obligationId String
  fileName     String
  originalName String
  fileSize     Int
  mimeType     String
  s3Key        String     @unique
  s3Url        String?
  uploadedBy   String
  createdAt    DateTime   @default(now())
  obligation   Obligation @relation(fields: [obligationId], references: [id], onDelete: Cascade)

  @@index([obligationId])
  @@index([uploadedBy])
}

enum Regime {
  SIMPLES
  LUCRO_PRESUMIDO
  LUCRO_REAL
  MEI
}

enum ObligationStatus {
  PENDING
  SUBMITTED
  LATE
  PAID
  CANCELED
}

enum UserRole {
  ACCOUNTING
  CLIENT
  ACCOUNTING_NORMAL
  ACCOUNTING_ADMIN
  ACCOUNTING_SUPER
  CLIENT_NORMAL
  CLIENT_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model AuditLog {
  id        String     @id @default(cuid())
  userId    String     // Quem fez a ação
  action    ActionType // Tipo de ação (CREATE, UPDATE, DELETE, VIEW, DOWNLOAD)
  entity    EntityType // Entidade afetada (Obligation, User, ObligationFile, Company)
  entityId  String     // ID da entidade afetada
  metadata  String?    // JSON com informações adicionais
  ipAddress String?    // IP do usuário
  userAgent String?    // Browser/dispositivo
  createdAt DateTime   @default(now())

  @@index([userId])
  @@index([action])
  @@index([entity])
  @@index([entityId])
  @@index([createdAt])
}

enum ActionType {
  CREATE
  UPDATE
  DELETE
  VIEW
  DOWNLOAD
  LOGIN
  LOGOUT
  UPLOAD
  STATUS_CHANGE
}

enum EntityType {
  Obligation
  User
  ObligationFile
  Company
  Auth
}
